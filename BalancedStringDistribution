// this helps to break array into similar length lines 
import SwiftUI


struct BalancedStringDistribution: View {
    let myArray: [ChipsInputStruct]
    let numberOfStacks: Int
    
    var body: some View {
        VStack {
            ForEach(0..<numberOfStacks, id: \.self) { index in
                HStack {
                    ForEach(splitWordsEvenly(array: myArray, into: numberOfStacks)[index], id: \.id) { item in
                        Text(item.name)
                            .modifier(paddedOverlay(paddingAmount: 8))
                    }
                    Spacer()
                }.padding(.horizontal,1)
            }
        }
    }
    
    func splitWordsEvenly(array: [ChipsInputStruct], into parts: Int) -> [[ChipsInputStruct]] {
        let sortedArray = array.sorted(by: { $0.name.count > $1.name.count }) // Sort by word length
        
        var buckets: [[ChipsInputStruct]] = Array(repeating: [], count: parts)
        
        for word in sortedArray {
            let shortestBucket = buckets.min { $0.reduce(0) { $0 + $1.name.count } < $1.reduce(0) { $0 + $1.name.count } } ?? []
            buckets[buckets.firstIndex(of: shortestBucket) ?? 0].append(word)
        }
        
        return buckets
    }
}

//MARK: - USAGE

struct bisss: View {
    let myArray: [ChipsInputStruct] = [
        ChipsInputStruct(id: 1, name: "fgbfbfgbfgbfbOne"),
        ChipsInputStruct(id: 2, name: "Two"),
        ChipsInputStruct(id: 3, name: "Three"),
        ChipsInputStruct(id: 4, name: "fgbfbfgbfgbfbOne"),
        ChipsInputStruct(id: 5, name: "Two"),
        ChipsInputStruct(id: 6, name: "Three")
        // Add other elements as needed
    ]
    let numberOfStacks = 2
    
    var body: some View {
        BalancedStringDistribution(myArray: myArray, numberOfStacks: numberOfStacks)
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        bisss()
    }
}
